{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","action.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d45c5e9d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name , email , id}) => {\r\n  return(\r\n    <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt = 'robots' src ={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n  return(\r\n\r\n      <div>\r\n        {\r\n          robots.map((user,i) => {\r\n            return (\r\n              <Card\r\n                key = {i}\r\n                id = {robots[i].id}\r\n                name = {robots[i].name}\r\n                email = {robots[i].email}\r\n              />\r\n            );\r\n          })\r\n        }\r\n\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield , searchChange}) => {\r\n  return(\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange = {searchChange}\r\n       />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflow: 'scroll' , border: '5px solid black' , height: '500px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\ncomponentDidCatch(error, info){\r\n  this.setState({hasError: true})\r\n}\r\n\r\n  render() {\r\n    if(this.state.hasError) {\r\n      return <h1>Ooooops, That is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n      if(this.state.count !== nextState.count) {\r\n        return true;\r\n      }\r\n      return false;\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state=> {\r\n      return {count: state.count + 1}\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n      Count: {this.state.count}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default CounterButton;\r\n","import React , { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\n\r\nclass Header extends Component{\r\n//   shouldComponentUpdate(nextProps, nextState) {\r\n//       return false;\r\n//   }\r\n  render(){\r\n    return(\r\n      <div>\r\n\r\n        <h1 className = 'f1'>RoboFriends</h1>\r\n        <CounterButton color={'red'} />\r\n      </div>\r\n    )\r\n\r\n  }\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React , { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField , requestRobots } from '../action';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nconst mapStateToProbs = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProbs = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n\r\n}\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n\r\n  render(){\r\n    const {searchField , onSearchChange, robots , isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n    if(isPending) {\r\n      return <h1 className=\"tc\">Loading</h1>\r\n    } else{\r\n      return(\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange = {onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots = {filteredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProbs, mapDispatchToProbs)(App);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQEST_ROBOTS_PENDING,\r\n  REQEST_ROBOTS_SUCCESS,\r\n  REQEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCHFIELD ,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch( {type: REQEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data=> dispatch({ type:REQEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error=> dispatch({ type: REQEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD'\r\n\r\nexport const REQEST_ROBOTS_PENDING = 'REQEST_ROBOTS_PENDING';\r\nexport const REQEST_ROBOTS_SUCCESS = 'REQEST_ROBOTS_SUCCESS';\r\nexport const REQEST_ROBOTS_FAILED = 'REQEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQEST_ROBOTS_PENDING,\r\n  REQEST_ROBOTS_SUCCESS,\r\n  REQEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state , {searchField: action.payload})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state= initialStateRobots , action={}) => {\r\n  switch(action.type) {\r\n    case REQEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state , { isPending: true})\r\n    case REQEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state , { robots: action.payload, isPending: false })\r\n    case REQEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state , { error: action.payload, isPending: false })\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n      <Provider store={store}>\n      <App />\n      </Provider> ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}